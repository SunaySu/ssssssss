class index {
	static tarih(date, format) {
		const aylar = {
			"0": "Ocak",
			"1": "Şubat",
			"2": "Mart",
			"3": "Nisan",
			"4": "Mayıs",
			"5": "Haziran",
			"6": "Temmuz",
			"7": "Ağustos",
			"8": "Eylül",
			"9": "Ekim",
			"10": "Kasım",
			"11": "Aralık"
		}
		const gunler = {
			"0": "Pazar",
			"1": "Pazartesi",
			"2": "Salı",
			"3": "Çarşamba",
			"4": "Perşembe",
			"5": "Cuma",
			"6": "Cumartesi",
		}
		if(!date) throw new TypeError("Lütfen türkçeleştirilecek tarihi yazın.")
		const x = new Date(date)
		const tarih = new Date(Date.UTC(x.getFullYear(), x.getMonth(), x.getDate(), x.getHours(), x.getMinutes(), x.getSeconds()))
		const saat = `${tarih.getHours() < 10 ? "0" + tarih.getHours() : tarih.getHours()}:${tarih.getMinutes() < 10 ? "0" + tarih.getMinutes() : tarih.getMinutes()}:${tarih.getSeconds() < 10 ? "0" + tarih.getSeconds() : tarih.getSeconds()}`
		if(format) {
			const y = format.replace("S", tarih.getHours() < 10 ? "0" + tarih.getHours() : tarih.getHours()).replace("D", tarih.getMinutes() < 10 ? "0" + tarih.getMinutes() : tarih.getMinutes()).replace("s", tarih.getSeconds() < 10 ? "0" + tarih.getSeconds() : tarih.getSeconds()).replace("G", tarih.getDate() < 10 ? "0" + tarih.getDate() : tarih.getDate()).replace("A", aylar[tarih.getMonth()]).replace("Y", tarih.getFullYear()).replace("g", gunler[tarih.getDay()])
			return y
		} else {
			return `${tarih.getDate() < 10 ? "0" + tarih.getDate() : tarih.getDate()} ${aylar[tarih.getMonth()]} ${tarih.getFullYear()} ${gunler[tarih.getDay()]} ${saat}`
		}
	}

	static esgeç(yazı, uzunluk) {
		if(!yazı) throw new TypeError("Lütfen kısaltılacak bir yazı yazın.")
		if(!uzunluk) throw new TypeError("Lütfen es geçilecek karakter sayısını yazın.")
		if(yazı.length <= uzunluk) throw new TypeError("Es geçilecek karakter sayısı yazıdan uzun olamaz.")
		if(uzunluk === 0) throw new TypeError("Es geçilecek karakter sayısı sıfır olamaz.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen kısaltılacak şeyi yazı(string) formatında yazın.")
		if(typeof uzunluk !== "number") throw new TypeError("Lütfen kısaltılacak karakter sayısını sayı(number) formatında yazın.")
		return `${yazı.substring(uzunluk, yazı.length)}`
	}

	static sondanesgeç(yazı, uzunluk) {
		if(!yazı) throw new TypeError("Lütfen sondan es geçilecek bir yazı yazın.")
		if(!uzunluk) throw new TypeError("Lütfen sondan es geçilecek karakter sayısını yazın.")
		if(yazı.length < uzunluk) throw new TypeError("Sondan es geçilecek karakter sayısı yazıdan uzun olamaz.")
		if(uzunluk === 0) throw new TypeError("Sondan es geçilecek karakter sayısı sıfır olamaz.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen kısaltılacak şeyi yazı(string) formatında yazın.")
		if(typeof uzunluk !== "number") throw new TypeError("Lütfen kısaltılacak karakter sayısını sayı(number) formatında yazın.")
		return `${yazı.substring(0, yazı.length - uzunluk)}`
	}

	static seg(yazı, uzunluk) {
		if(!yazı) throw new TypeError("Lütfen sondan es geçilecek bir yazı yazın.")
		if(!uzunluk) throw new TypeError("Lütfen sondan es geçilecek karakter sayısını yazın.")
		if(yazı.length <= uzunluk) throw new TypeError("Sondan es geçilecek karakter sayısı yazıdan uzun olamaz.")
		if(uzunluk === 0) throw new TypeError("Sondan es geçilecek karakter sayısı sıfır olamaz.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen kısaltılacak şeyi yazı(string) formatında yazın.")
		if(typeof uzunluk !== "number") throw new TypeError("Lütfen kısaltılacak karakter sayısını sayı(number) formatında yazın.")
		return `${yazı.substring(0, yazı.length - uzunluk)}`
	}

	static hepsiniçevir(yazı, old, neww, bk) {
		if(!yazı) throw new TypeError("Lütfen çevirilecek yazıyı yazın.")
		if(!old) throw new TypeError("Lütfen yazıdan çevrilecek eski karakterleri yazın.")
		if(!neww) throw new TypeError("Lütfen yazıdan çevrilecek yeni karakterleri yazın.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen çevirilecek şeyi yazı(string) formatında yazın.")
		if(typeof old !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(typeof neww !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(bk && bk === true) {
			return `${yazı.toLowerCase().replace(new RegExp(old.toLowerCase(), 'g'), neww)}`
		} else {
			return `${yazı.replace(new RegExp(old, 'g'), neww)}`
		}
	}

	static hç(yazı, old, neww, bk) {
		if(!yazı) throw new TypeError("Lütfen çevirilecek yazıyı yazın.")
		if(!old) throw new TypeError("Lütfen yazıdan çevrilecek eski karakterleri yazın.")
		if(!neww) throw new TypeError("Lütfen yazıdan çevrilecek yeni karakterleri yazın.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen çevirilecek şeyi yazı(string) formatında yazın.")
		if(typeof old !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(typeof neww !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(bk && bk === true) {
			return `${yazı.toLowerCase().replace(new RegExp(old.toLowerCase(), 'g'), neww)}`
		} else {
			return `${yazı.replace(new RegExp(old, 'g'), neww)}`
		}
	}

	static hesapla(yazı) {
		if(!yazı) throw new TypeError("Lütfen hesaplanacak işlemi yazın.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen hesaplanacak işlemi yazı(string) formatında yazın.")
		const reg = /^[+/*-0123456789]+$/g
		if(!yazı.match(reg)) throw new TypeError("Lütfen sadece hesaplanacak işlemi yazın.")
		return eval(yazı)
	}
}

module.exports = index;